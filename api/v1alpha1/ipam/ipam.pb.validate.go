// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1alpha1/ipam/ipam.proto

package ipam

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AllocateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AllocateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllocateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllocateRequestMultiError, or nil if none found.
func (m *AllocateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllocateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContainerID()) < 1 {
		err := AllocateRequestValidationError{
			field:  "ContainerID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIfName()) < 1 {
		err := AllocateRequestValidationError{
			field:  "IfName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNetNamespace()) < 1 {
		err := AllocateRequestValidationError{
			field:  "NetNamespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDefaultSubnet()) < 1 {
		err := AllocateRequestValidationError{
			field:  "DefaultSubnet",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := AllocateRequestValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodNamespace()) < 1 {
		err := AllocateRequestValidationError{
			field:  "PodNamespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodUID()) < 1 {
		err := AllocateRequestValidationError{
			field:  "PodUID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AllocateRequestMultiError(errors)
	}

	return nil
}

// AllocateRequestMultiError is an error wrapping multiple validation errors
// returned by AllocateRequest.ValidateAll() if the designated constraints
// aren't met.
type AllocateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllocateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllocateRequestMultiError) AllErrors() []error { return m }

// AllocateRequestValidationError is the validation error returned by
// AllocateRequest.Validate if the designated constraints aren't met.
type AllocateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllocateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllocateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllocateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllocateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllocateRequestValidationError) ErrorName() string { return "AllocateRequestValidationError" }

// Error satisfies the builtin error interface
func (e AllocateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllocateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllocateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllocateRequestValidationError{}

// Validate checks the field values on AllocateReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllocateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllocateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllocateReplyMultiError, or
// nil if none found.
func (m *AllocateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllocateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIPs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllocateReplyValidationError{
						field:  fmt.Sprintf("IPs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllocateReplyValidationError{
						field:  fmt.Sprintf("IPs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllocateReplyValidationError{
					field:  fmt.Sprintf("IPs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRoutes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllocateReplyValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllocateReplyValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllocateReplyValidationError{
					field:  fmt.Sprintf("Routes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDNS()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AllocateReplyValidationError{
					field:  "DNS",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AllocateReplyValidationError{
					field:  "DNS",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDNS()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AllocateReplyValidationError{
				field:  "DNS",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AllocateReplyMultiError(errors)
	}

	return nil
}

// AllocateReplyMultiError is an error wrapping multiple validation errors
// returned by AllocateReply.ValidateAll() if the designated constraints
// aren't met.
type AllocateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllocateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllocateReplyMultiError) AllErrors() []error { return m }

// AllocateReplyValidationError is the validation error returned by
// AllocateReply.Validate if the designated constraints aren't met.
type AllocateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllocateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllocateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllocateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllocateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllocateReplyValidationError) ErrorName() string { return "AllocateReplyValidationError" }

// Error satisfies the builtin error interface
func (e AllocateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllocateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllocateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllocateReplyValidationError{}

// Validate checks the field values on IPConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IPConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IPConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IPConfigMultiError, or nil
// if none found.
func (m *IPConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IPConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Nic

	// no validation rules for Version

	if len(errors) > 0 {
		return IPConfigMultiError(errors)
	}

	return nil
}

// IPConfigMultiError is an error wrapping multiple validation errors returned
// by IPConfig.ValidateAll() if the designated constraints aren't met.
type IPConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IPConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IPConfigMultiError) AllErrors() []error { return m }

// IPConfigValidationError is the validation error returned by
// IPConfig.Validate if the designated constraints aren't met.
type IPConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IPConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IPConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IPConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IPConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IPConfigValidationError) ErrorName() string { return "IPConfigValidationError" }

// Error satisfies the builtin error interface
func (e IPConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIPConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IPConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IPConfigValidationError{}

// Validate checks the field values on Route with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Route) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Route with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RouteMultiError, or nil if none found.
func (m *Route) ValidateAll() error {
	return m.validate(true)
}

func (m *Route) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dst

	// no validation rules for Gw

	// no validation rules for IfName

	if len(errors) > 0 {
		return RouteMultiError(errors)
	}

	return nil
}

// RouteMultiError is an error wrapping multiple validation errors returned by
// Route.ValidateAll() if the designated constraints aren't met.
type RouteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteMultiError) AllErrors() []error { return m }

// RouteValidationError is the validation error returned by Route.Validate if
// the designated constraints aren't met.
type RouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteValidationError) ErrorName() string { return "RouteValidationError" }

// Error satisfies the builtin error interface
func (e RouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteValidationError{}

// Validate checks the field values on DNS with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *DNS) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DNS with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DNSMultiError, or nil if none found.
func (m *DNS) ValidateAll() error {
	return m.validate(true)
}

func (m *DNS) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	if len(errors) > 0 {
		return DNSMultiError(errors)
	}

	return nil
}

// DNSMultiError is an error wrapping multiple validation errors returned by
// DNS.ValidateAll() if the designated constraints aren't met.
type DNSMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DNSMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DNSMultiError) AllErrors() []error { return m }

// DNSValidationError is the validation error returned by DNS.Validate if the
// designated constraints aren't met.
type DNSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DNSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DNSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DNSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DNSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DNSValidationError) ErrorName() string { return "DNSValidationError" }

// Error satisfies the builtin error interface
func (e DNSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDNS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DNSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DNSValidationError{}

// Validate checks the field values on ReleaseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReleaseRequestMultiError,
// or nil if none found.
func (m *ReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContainerID()) < 1 {
		err := ReleaseRequestValidationError{
			field:  "ContainerID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIfName()) < 1 {
		err := ReleaseRequestValidationError{
			field:  "IfName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NetNamespace

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := ReleaseRequestValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodNamespace()) < 1 {
		err := ReleaseRequestValidationError{
			field:  "PodNamespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodUID()) < 1 {
		err := ReleaseRequestValidationError{
			field:  "PodUID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReleaseRequestMultiError(errors)
	}

	return nil
}

// ReleaseRequestMultiError is an error wrapping multiple validation errors
// returned by ReleaseRequest.ValidateAll() if the designated constraints
// aren't met.
type ReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseRequestMultiError) AllErrors() []error { return m }

// ReleaseRequestValidationError is the validation error returned by
// ReleaseRequest.Validate if the designated constraints aren't met.
type ReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseRequestValidationError) ErrorName() string { return "ReleaseRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseRequestValidationError{}

// Validate checks the field values on ReleaseReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReleaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReleaseReplyMultiError, or
// nil if none found.
func (m *ReleaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReleaseReplyMultiError(errors)
	}

	return nil
}

// ReleaseReplyMultiError is an error wrapping multiple validation errors
// returned by ReleaseReply.ValidateAll() if the designated constraints aren't met.
type ReleaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseReplyMultiError) AllErrors() []error { return m }

// ReleaseReplyValidationError is the validation error returned by
// ReleaseReply.Validate if the designated constraints aren't met.
type ReleaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseReplyValidationError) ErrorName() string { return "ReleaseReplyValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseReplyValidationError{}
